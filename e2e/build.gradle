buildscript {
    ext {
        springBootVersion = '1.3.5.RELEASE'
    }
    repositories
            {
                maven
                        {
                            url "${artifactory_contextUrl}/repo"
                            credentials
                                    {
                                        username = "${artifactory_user}"
                                        password = "${artifactory_password}"
                                    }
                        }
            }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
        classpath("net.saliman:gradle-cobertura-plugin:2.2.8")
        classpath "com.org.link.base:link-gradle:latest.release"
    }
}
// Establish/apply the plugins needed by this project
plugins
        {
            id "groovy"        // enables groovy compilation
            id "eclipse"        // sets up the project for import into eclipse IDEs
            id "idea"            // sets up the project for import into intelliJ IDEs
        }


apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'cobertura'


sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}
bootRepackage {

    enabled = false
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')

    //config server
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile 'org.springframework.security:spring-security-rsa'

    compile "org.codehaus.groovy:groovy-all:2.4.4"
    compile('org.springframework.boot:spring-boot-starter-web')
    compile 'mysql:mysql-connector-java'

    testCompile('org.springframework.boot:spring-boot-starter-test')



    //Test Spock
    testCompile "org.codehaus.groovy:groovy-all"
    testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:latest.release'
    testCompile 'org.spockframework:spock-core'


}

// Run all tests with stage profile.
test {
    // This only works because tests are executed in a separate JVM.
    systemProperty 'spring.profiles.active', 'stage'
    if (!System.getenv('SPRING_CONFIG_LOCATION') && !systemProperties['spring.config.location']) {
        systemProperty 'spring.config.location', 'classpath:config/link-security.yml,classpath:config/link-logging.yml,classpath:config/link-swagger.yml'
    }
    if (!System.getenv('LOG_CONSOLE_APPENDER') && !systemProperties['LOG_CONSOLE_APPENDER']) {
        systemProperty 'LOG_CONSOLE_APPENDER', 'LOCAL_CONSOLE'
    }
    if (!System.getenv('LOG_LEVEL') && !systemProperties['LOG_LEVEL']) {
        systemProperty 'LOG_LEVEL', 'DEBUG'
    }
    systemProperty 'spring.config.name', 'skeleton'
    exclude '**/e2e/**'
    classpath = project.sourceSets.test.runtimeClasspath
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.RELEASE"
    }
}

task testE2e(type: Test) {
    testLogging {
        showStandardStreams = true
    }
    systemProperties = System.properties
    if (!System.getenv('SPRING_CONFIG_LOCATION') && !systemProperties['spring.config.location']) {
        systemProperty 'spring.config.location', 'classpath:config/link-security.yml,classpath:config/link-logging.yml,classpath:config/link-swagger.yml'
        systemProperty 'LOG_CONSOLE_APPENDER', 'LOCAL_CONSOLE'
    }
    if (!System.getenv('LOG_LEVEL') && !systemProperties['LOG_LEVEL']) {
        systemProperty 'LOG_LEVEL', 'DEBUG'
    }
    include '**/e2e/**'

    // Should only be run on a local server
    exclude '**/util/**'
}


cobertura {
    coverageFormats = ['html', 'xml']
    coverageIgnoreTrivial = true
    coverageIgnores = ['org.slf4j.Logger.*']
    coverageCheckHaltOnFailure = false // set to true to fail builds not meeting code coverage requirements
    coverageCheckTotalLineRate = 50 // minimum % lines coverage
    coverageTestTasks {
        project.tasks.withType(Test).matching {
            it.name.equals("test") // prevent from running on testE2e
        }
    }
}

test.finalizedBy(project.tasks.coberturaCheck)

